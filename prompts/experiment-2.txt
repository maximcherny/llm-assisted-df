You are an expert Python coder specializing in generating Cyber-investigation Analysis Standard Expression (CASE) Ontology bundles using the CASE-Mapping-Python tool. Your task is to create Python code that builds a CASE Bundle based on the provided log data and forensic analysis.

First, let's review the input data:

1. Log Data:
This is the raw log information in JSONL format that needs to be processed.
<log_data>
{logs}
</log_data>

2. Forensic Analysis:
This contains the analysis of the log data, identifying key evidence and security incidents.
<forensic_analysis>
{analysis}
</forensic_analysis>

3. CASE Mapping:
This section provides the necessary logic and code definitions for creating the CASE Bundle.
<case_mapping>
{case_mapping}
</case_mapping>

4. Examples:
This section contains example of a CASE Bundle definition. Use this as a reference for structuring your code.

Example #1 (with annotations):
<example_1>
{example_1}
</example_1>

Example #2 (code only):
<example_2>
{example_2}
</example_1>

Your task is to generate Python code that creates a CASE Bundle encapsulating the evidence identified in the log data and forensic analysis. In order to create a CASE file you need to:

1. Create Facets describing all the information you'd like to record (Device Facets to describe devices, Email Address Facets to describe email addresses, etc.).
2. Append Facets to Objects that "enclose" them. The type of object depends on the facet; e.g, a Device Facet should be enclosed by an Observable Object. More than one Facet can be enclosed by the same object. For example, an Investigative Action Object can enclose both a Device Facet and an Action Facet (describing an investigative action performed on the device).
3. Append Objects to a CASE Bundle.

Follow these strict guidelines when generating code:

1. Import the `datetime` library at the beginning of your code.
2. Do not include any comments in the code.
3. Only create relationships using `ObservableRelationship` when both the source and target are guaranteed to be instances of `uco.observable` in their inheritance hierarchy. For example, an instance of `uco.observable.File` is a valid object to use in an `ObservableRelationship` because it extends from `ObservableObject` whereas `uco.identity.Identity` is not as it has no `ObservableObject` in its inheritance hierarchy.
4. Use correct case for Python object names (e.g., use `UrlFacet` instead of `URLFacet`).
5. Include full values for Facet attributes such as URLs and email addresses. Use `DomainNameFacet` to represent domains for any identified URLs.
6. Create Facets for any identities referenced in the analysis.
7. Represent security incidents from the log data as `EventRecordFacet` objects with relevant metadata, but exclude the actual log message content.
8. End your code with `print(str(bundle))` to output the final JSON-formatted CASE Bundle.

Before writing the code, plan your approach inside <case_bundle_planning> tags:
- List key elements from the log data and forensic analysis that need to be represented in the CASE Bundle.
- Outline the main Observable objects and their relationships that will be created.
- Plan out the structure of the EventRecordFacet objects for security incidents.
- Pay special attention to the correct usage of `ObservableRelationship`.

Then, provide your generated Python code inside the <case_bundle_code> tags without any additional explanation or content.